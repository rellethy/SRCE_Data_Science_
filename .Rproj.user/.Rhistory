big_mac_data <- read.csv("big-mac-historical-source-data.csv")
show(big_mac_data)
big_mac_data$date <- ymd(big_mac_data$date)
View(big_mac_data)
# Reading the data
big_mac_data <- read.csv("big-mac-historical-source-data.csv")
View(big_mac_data)
big_mac_data$date <- ymd(big_mac_data$date)
# Reading the data
big_mac_data <- read.csv("big-mac-historical-source-data.csv")
# Reading the data
big_mac_data <- read.csv("big-mac-historical-source-data.csv")
big_mac_data$date <- ymd_hms(big_mac_data$date)
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
#Time series analysis of
library(tidyverse)
install.packages("magrittr")
install.packages("magrittr")
library("magrittr")
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
library(ggplot2)
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
# Filtering data for a few countries for clarity in visualization
countries_of_interest <- c("United States", "Canada", "Australia", "India", "Germany")
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
library(dplyr)
# Filtering data for a few countries for clarity in visualization
countries_of_interest <- c("United States", "Canada", "Australia", "India", "Germany")
filtered_data <- big_mac_data %>%
filter(name %in% countries_of_interest)
# View the filtered data
head(filtered_data)
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
big_mac_data <- big_mac_data %>%
mutate(PPP = local_price / dollar_ex)
# Select data from a recent date
recent_date_data <- big_mac_data %>%
filter(date == max(date))
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_minimal() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_get() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1990",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
#geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "help") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_line(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_col() +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
# Creating the bar chart for PPP
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") +
labs(title = "Purchasing Power Parity of Big Mac Across Countries in 1999",
x = "Country",
y = "PPP (Price in USD)",
fill = "Country") +
theme_classic() +
coord_flip() # Flipping coordinates for better readability of country names
# Creating the time series plot
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() +
labs(title = "Time Series of Big Mac Prices",
x = "Year",
y = "Local Price",
color = "Country") +
theme_minimal()
library(tidyverse)
library(lubridate)
big_mac_data <- read_csv("big-mac-historical-source-data.csv") %>%
mutate(date = ymd_hms(date),
year = year(date),
month = month(date),
country_code = as.factor(country_code)) %>%
na.omit()  # Remove rows with NA values
big_mac_data <- read_csv("big-mac-historical-source-data.csv") %>%
mutate(date = ymd_hms(date),
year = year(date),
month = month(date),
currency_code = as.factor(currency_code)) %>%
na.omit()  # Remove rows with NA values
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data$date <- ymd_hms(big_mac_data$date)
head(big_mac_data$date)
mutate(date = ymd_hms(date),
year = year(date),
month = month(date))
month = month(date)
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data <- big_mac_data %>%
mutate(
date = ymd_hms(sub("T.*", "", date)),  # Clean and convert date
year = year(date),
month = month(date),
iso_a3 = as.factor(iso_a3)  # Convert country code to factor
) %>%
na.omit()  # Remove rows with NA values
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data <- big_mac_data %>%
mutate(
date = ymd_hms(sub("T.*", "", date)),  # Clean and convert date
year = year(date),
month = month(date),
iso_a3 = as.factor(iso_a3)  # Convert country code to factor
) %>%
na.omit()  # Remove rows with NA values
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data <- big_mac_data %>%
mutate(
date = ymd_hms(sub("T.*", "", date)),  # Clean and convert date
year = year(date),
month = month(date),
iso_a3 = as.factor(iso_a3)  # Convert country code to factor
)
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data <- big_mac_data %>%
mutate(
date = ymd_hms(date),  # Directly parse ISO 8601 formatted dates
year = year(date),
month = month(date),
iso_a3 = as.factor(iso_a3)  # Convert country code to factor
) %>%
na.omit()  # Remove rows with NA values
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
# Apply each mutation step individually to identify which causes the problem
big_mac_data <- big_mac_data %>%
mutate(date_converted = ymd_hms(date))
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
big_mac_data <- big_mac_data %>%
mutate(year = year(date))  # Apply next mutation if the previous step was successful
big_mac_data <- big_mac_data %>%
mutate(month = month(date))
big_mac_data <- big_mac_data %>%
mutate(iso_a3_factor = as.factor(iso_a3))
na.omit()
set.seed(123)  # for reproducibility
train_indices <- sample(1:nrow(big_mac_data), 0.8 * nrow(big_mac_data))
train_data <- big_mac_data[train_indices, ]
test_data <- big_mac_data[-train_indices, ]
library(caret)
install.packages("caret")
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
# Define model training control
fit_control <- trainControl(method = "cv", number = 10)
# Train the model using linear regression
model <- train(local_price ~ ., data = train_data, method = "lm", trControl = fit_control)
predictions <- predict(model, newdata = test_data)
all_levels <- unique(c(as.character(big_mac_data$iso_a3), "Venezuela"))
big_mac_data$iso_a3 <- factor(big_mac_data$iso_a3, levels = all_levels)
# Prepare new data ensuring it has the same levels
new_data$iso_a3 <- factor(new_data$iso_a3, levels = all_levels)
# Prepare new data ensuring it has the same levels
test_data$iso_a3 <- factor(new_data$iso_a3, levels = all_levels)
# Prepare new data ensuring it has the same levels
test_data$iso_a3 <- factor(test_data$iso_a3, levels = all_levels)
# Train the model using linear regression
model <- train(local_price ~ ., data = train_data, method = "lm", trControl = fit_control)
# Define model training control
fit_control <- trainControl(method = "cv", number = 10)
# Train the model using linear regression
model <- train(local_price ~ ., data = train_data, method = "lm", trControl = fit_control)
predictions <- predict(model, newdata = test_data)
performance <- postResample(pred = predictions, obs = test_data$local_price)
library(tidyverse)
library(lubridate)
# Load the dataset
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
# Check the structure and summary of the dataset
glimpse(big_mac_data)
summary(big_mac_data)
# Convert date to an appropriate format
big_mac_data <- big_mac_data %>%
mutate(date = ymd_hms(date))
# Load the dataset
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
# Check the structure and summary of the dataset
glimpse(big_mac_data)
summary(big_mac_data)
known_countries <- c(unique(big_mac_data$iso_a3), "Venezuela")  # Adding 'Venezuela' if it's a known outlier
big_mac_data$iso_a3 <- factor(big_mac_data$iso_a3, levels = known_countries)
# Handle any other cleaning tasks, such as dealing with missing data
big_mac_data <- drop_na(big_mac_data)
big_mac_data <- big_mac_data %>%
mutate(year = year(date),
month = month(date))
set.seed(123)  # for reproducibility
training_indices <- sample(1:nrow(big_mac_data), 0.8 * nrow(big_mac_data))
train_data <- big_mac_data[training_indices, ]
test_data <- big_mac_data[-training_indices, ]
library(caret)
# Set up training control
train_control <- trainControl(method = "cv", number = 10)
# Train a model; starting with a linear regression model
model <- train(local_price ~ ., data = train_data, method = "lm", trControl = train_control)
predictions <- predict(model, newdata = test_data)
# Before predicting, adjust test data to handle new unseen levels
test_data$iso_a3 <- as.character(test_data$iso_a3)
test_data$iso_a3[!test_data$iso_a3 %in% levels(train_data$iso_a3)] <- "Other"
test_data$iso_a3 <- factor(test_data$iso_a3, levels = levels(train_data$iso_a3))
predictions <- predict(model, newdata = test_data)
training_indices <- sample(1:nrow(big_mac_data), 0.6 * nrow(big_mac_data))
train_data <- big_mac_data[training_indices, ]
test_data <- big_mac_data[-training_indices, ]
# Set up training control
train_control <- trainControl(method = "cv", number = 10)
# Train a model; starting with a linear regression model
model <- train(local_price ~ ., data = train_data, method = "lm", trControl = train_control)
# Before predicting, adjust test data to handle new unseen levels
test_data$iso_a3 <- as.character(test_data$iso_a3)
test_data$iso_a3[!test_data$iso_a3 %in% levels(train_data$iso_a3)] <- "Other"
test_data$iso_a3 <- factor(test_data$iso_a3, levels = levels(train_data$iso_a3))
predictions <- predict(model, newdata = test_data)
sresults <- data.frame(Actual = test_data$local_price, Predicted = predictions)
print(head(results))
training_indices <- sample(1:nrow(big_mac_data), 0.5 * nrow(big_mac_data))
predictions <- predict(model, newdata = test_data)
predictions <- predict(model, newdata = test_data)
training_indices <- sample(1:nrow(big_mac_data), 0.1 * nrow(big_mac_data))
predictions <- predict(model, newdata = test_data)
training_indices <- sample(1:nrow(big_mac_data), 0.8 * nrow(big_mac_data))
predictions <- predict(model, newdata = test_data)
training_indices <- sample(1:nrow(big_mac_data), 0.8 * nrow(big_mac_data))
train_data <- big_mac_data[training_indices, ]
test_data <- big_mac_data[-training_indices, ]
test_data <- test_data[test_data$iso_a3 %in% levels(train_data$iso_a3), ]
# Set up training control
train_control <- trainControl(method = "cv", number = 10)
# Train a model; starting with a linear regression model
model <- train(local_price ~ ., data = train_data, method = "lm", trControl = train_control)
predictions <- predict(model, newdata = test_data)
setwd("/Users/ramseyellethy/Data Science/SRCE_Data_Science")
library(tidyverse)
# Load the data
big_mac_data <- read_csv("big-mac-historical-source-data.csv")
View(big_mac_data)
model <- lm(local_price ~ dollar_ex, data = big_mac_data)
# Plotting
ggplot(big_mac_data, aes(x = dollar_ex, y = local_price)) +
geom_point(aes(color = iso_a3), alpha = 0.5) +  # Color coded by country code
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
labs(title = "Linear Regression of Big Mac Prices vs. Exchange Rate",
x = "Exchange Rate (dollar_ex)",
y = "Local Price") +
theme_minimal()
# Plotting
ggplot(big_mac_data, aes(x = dollar_ex, y = local_price)) +
geom_point(aes(color = country_code), alpha = 0.5) +  # Color coded by country code
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
labs(title = "Linear Regression of Big Mac Prices vs. Exchange Rate",
x = "Exchange Rate (dollar_ex)",
y = "Local Price") +
theme_minimal()
# Plotting
ggplot(big_mac_data, aes(x = dollar_ex, y = local_price)) +
geom_point(aes(color = isoa3), alpha = 0.5) +  # Color coded by country code
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
labs(title = "Linear Regression of Big Mac Prices vs. Exchange Rate",
x = "Exchange Rate (dollar_ex)",
y = "Local Price") +
theme_minimal()
# Plotting
ggplot(big_mac_data, aes(x = dollar_ex, y = local_price)) +
geom_point(aes(color = iso_a3), alpha = 0.5) +  # Color coded by country code
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Linear regression line
labs(title = "Linear Regression of Big Mac Prices vs. Exchange Rate",
x = "Exchange Rate (dollar_ex)",
y = "Local Price") +
theme_minimal()
source("~/Data Science/SRCE_Data_Science/Intro.R", echo=TRUE)
source("~/Data Science/SRCE_Data_Science/Intro.R", echo=TRUE)
source("~/Data Science/SRCE_Data_Science/Intro.R", echo=TRUE)
books_daggplot2books_data <- read.csv("books_data.csv")
View(big_mac_data)
View(books_daggplot2books_data)
View(filtered_data)
View(fit_control)
View(model)
View(recent_date_data)
View(recent_date_data)
View(test_data)
View(train_control)
View(train_control)
big.mac.historical.source.data <- read.csv("~/Data Science/SRCE_Data_Science/big-mac-historical-source-data.csv", header=FALSE)
View(big.mac.historical.source.data)
setwd("/Users/ramseyellethy/Data Science/SRCE_Data_Science")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
library(tidyverse)
library(tidyverse) #collection of packages we will use
library(lubridate) #date time manipulation
library(magrittr) #forward pipe operator
big.mac.historical.source.data$date <- ymd_hms(big.mac.historical.source.data$date)
big_mac_data <- read.csv("big-mac-historical-source-data.csv")
View(big_mac_data)
big_mac_data$date <- ymd_hms(big_mac_data$date)
View(big_mac_data)
countries_of_interest <- c("United States", "Canada", "Australia", "India", "Germany")
filtered_data <- big_mac_data %>% filter(name %in% countries_of_interest )
View(filtered_data)
+ theme_minimal()
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() + labs(title = "Time Series Analysis of Big Mac Prices", x = "Year", "Local Price", color = "Country") +
theme_minimal()
big_mac_data <- big_mac_data %>% mutate(PPP = local_price / dollar_ex)
View(big_mac_data)
recent_date_data <- big_mac_data %>% filter(date == max(date))
recent_date_data <- big_mac_data %>% filter(date == max(date))
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") + labs(title = "Purchasing Power Parity of Big Macs in 1999", x = "Country", y = "PPP (price in USD",
fill = "Country") + theme_minimal() + coord_flip()
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() + labs(title = "Time Series Analysis of Big Mac Prices", x = "Year", "Local Price", color = "Country") +
theme_minimal()
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") + labs(title = "Purchasing Power Parity of Big Macs in 1999", x = "Country", y = "PPP (price in USD",
fill = "Country") + theme_minimal() + coord_flip()
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") + labs(title = "Purchasing Power Parity of Big Macs in 1999", x = "Country", y = "PPP (price in USD",
fill = "Country") + theme_classic() + coord_flip()
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") + labs(title = "Purchasing Power Parity of Big Macs in 1999", x = "Country", y = "PPP (price in USD",
fill = "Country") + theme_dark() + coord_flip()
git pull origin
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() + labs(title = "Time Series Analysis of Big Mac Prices", x = "Year", "Local Price", color = "Country") +
theme_minimal()
library(tidyverse) #collection of packages we will use
library(lubridate) #date time manipulation
library(magrittr) #forward pipe operator
install.packages("magrittr")
install.packages("magrittr")
big_mac_data <- read.csv("big-mac-historical-source-data.csv")
View(big_mac_data)
filtered_data <- big_mac_data %>% filter(name %in% countries_of_interest )
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() + labs(title = "Time Series Analysis of Big Mac Prices", x = "Year", "Local Price", color = "Country") +
theme_minimal()
big_mac_data$date <- ymd_hms(big_mac_data$date)
filtered_data <- big_mac_data %>% filter(name %in% countries_of_interest )
ggplot(filtered_data, aes(x = date, y = local_price, color = name)) +
geom_line() + labs(title = "Time Series Analysis of Big Mac Prices", x = "Year", "Local Price", color = "Country") +
theme_minimal()
big_mac_data <- big_mac_data %>% mutate(PPP = local_price / dollar_ex)
recent_date_data <- big_mac_data %>% filter(date == max(date))
ggplot(recent_date_data, aes(x = reorder(name, PPP), y = PPP, fill = name)) +
geom_bar(stat = "identity") + labs(title = "Purchasing Power Parity of Big Macs in 1999", x = "Country", y = "PPP (price in USD",
fill = "Country") + theme_dark() + coord_flip()
